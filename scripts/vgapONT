#!/bin/bash

usage () {
    echo "
Viral genome assembly pipeline for WGS using Oxford Nanopore Technologies (Using ARTIC v.1.2.2)

List available primer scheme in this workflow:
  $(basename "$0") -l

Basecalling + demultiplexing + Assembly:
  $(basename "$0") -i <input path> -g <gpu memory> -p <primer scheme> -s <sample sheet> -t <threads>

Basecalling + demultiplexing:
  $(basename "$0") -b <input path> -g <gpu memory> -t <threads>

Assembly:
  $(basename "$0") -a <input path> -p <primer scheme> -s <sample sheet> -t <threads>

Command line parameters:
  -a arg    Path containing the demultiplexed fastQ files (for assembly workflow).
  -b arg    Path containing the fast5 sequencing data (for basecalling + demultiplexing workflow).
  -g arg    VRAM to determine the number of runners per GPU device.
  -h        Print this help and exit.
  -i arg    Path containing the fast5 sequencing data.
  -p arg    Primer scheme panel user for generate tiling amplicons.
  -s arg    Path containing the sample sheet in csv.
  -t arg    Max number of threads (default: all cores minus 2).
  -u arg    Update conda dependencies.
  -v        Display version information and check for update."
exit -1
}

primerscheme_list () {
    echo "
AVAILABLE PRIMER SCHEMES
Updated 31 Jan 2022
-----------------------------------------------------------------------------------------
target              primer_scheme         reference
-----------------------------------------------------------------------------------------
CHIKV Asian/ECSA    ChikAsianECSA/V1      https://github.com/zibraproject/zika-pipeline
DENV-1              DENV1/V1              https://doi.org/10.1038/s41467-021-22607-0
DENV-2              DENV2/V1              https://doi.org/10.1038/s41467-021-22607-0
DENV-3              DENV3/V1              https://doi.org/10.1038/s41467-021-22607-0
DENV-4              DENV4/V1              https://doi.org/10.1038/s41467-021-22607-0
EBOV                ZaireEbola/V1         https://github.com/artic-network/artic-ncov2019
EBOV                ZaireEbola/V2         https://github.com/artic-network/artic-ncov2019
EBOV                ZaireEbola/V3         https://github.com/artic-network/artic-ncov2019
LASV L-segment      LassaL/V1             https://github.com/zibraproject/zika-pipeline
LASV S-segment      LassaS/V1             https://github.com/zibraproject/zika-pipeline
NiV                 Nipah/V1              https://github.com/artic-network/artic-ncov2019
OROV L-segment      OROV400L              https://github.com/zibraproject/zika-pipeline
OROV M-segment      OROV400M              https://github.com/zibraproject/zika-pipeline
OROV S-segment      OROV400S              https://github.com/zibraproject/zika-pipeline
SARS-CoV-2          SC2_ARTIC/V1          https://github.com/artic-network/artic-ncov2019
SARS-CoV-2          SC2_ARTIC/V2          https://github.com/artic-network/artic-ncov2019
SARS-CoV-2          SC2_ARTIC/V3          https://github.com/artic-network/artic-ncov2019
SARS-CoV-2          SC2_ARTIC/V4          https://github.com/artic-network/artic-ncov2019
SARS-CoV-2          SC2_ARTIC/V4.1        https://github.com/artic-network/artic-ncov2019
SARS-CoV-2          SC2_MIDNIGHT/V1       https://doi.org/10.1093/biomethods/bpaa014
SARS-CoV-2          SC2_MIDNIGHT/V2       https://doi.org/10.1093/biomethods/bpaa014
SARS-CoV-2          SC2_FIOCRUZ-IOC/V1    https://doi.org/10.1101/2020.04.30.069039
SARS-CoV-2          SC2_FIOCRUZ-IOC/V2    https://doi.org/10.1101/2020.04.30.069039
YFV                 YFV500                https://github.com/zibraproject/zika-pipeline
YFV                 YFV1000               https://github.com/zibraproject/zika-pipeline
ZIKV Asian          ZikaAsian/V1          https://github.com/zibraproject/zika-pipeline
-----------------------------------------------------------------------------------------"
exit -1
}

update () {
    mamba update -y -n base -c conda-forge -c anaconda -c bioconda -c defaults conda
    mamba update -y -n vgap_assembly -c conda-forge -c anaconda -c bioconda -c defaults --all
    mamba update -y -n vgap_plot -c conda-forge -c anaconda -c bioconda -c defaults --all
exit -1
}

version () {
    echo "
vgapONT
-------
Updated 15 Ago 2022
Using ARTIC v.1.2.2 (https://github.com/artic-network/fieldbioinformatics)"
exit -1
}

while getopts "a:b:g:hi:lp:s:t:uv" OPT; do
    case "$OPT" in
        a) ASSEMBLY="$OPTARG";;
        b) BASECALLDEMUX="$OPTARG";;
        g) GPUMEM="$OPTARG";;
        h) usage;;
        i) BASECALL="$OPTARG";;
        l) primerscheme_list;;
        p) PRIMERSCHEME="$OPTARG";;
        s) SAMPLESHEET="$OPTARG";;
        t) THREADS="$OPTARG";;
        v) version;;
        u) update;;
    esac
done

VGAP="$HOME"/vgapONT

if [[ -z "$THREADS" ]]; then
    THREADS=$(lscpu | grep 'CPU(s):' | awk '{print $2}' | sed -n '1p' | awk '{print $1-2}')
fi

if [[ ! -z "$BASECALLDEMUX" ]]; then
    if [[ -z "$GPUMEM" ]]; then
        usage
    else
        LIBRARY_NAME=$(basename "$BASECALLDEMUX")
        [ ! -d "$VGAP"/analysis ] && mkdir "$VGAP"/analysis
        [ ! -d "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS ] && mkdir "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/CAT "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY
        echo "" && echo "Output path: "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS"
        echo "" && echo "Log Analysis: "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".$(date +'%Y-%m-%d').txt"
        echo "" && echo "To display the log output in fulscreen: watch tail -n 20 "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
    fi
elif [[ ! -z "$ASSEMBLY" ]]; then
    if [[ -z "$SAMPLESHEET" ]] || [[ -z "$PRIMERSCHEME" ]]; then
        usage
    else
        LIBRARY_NAME=$(basename "$SAMPLESHEET" | awk -F. '{print $1}')
        [ ! -d "$VGAP"/analysis ] && mkdir "$VGAP"/analysis
        [ ! -d "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS ] && mkdir "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY
        echo "" && echo "Output path: "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS"
        echo "" && echo "Log Analysis: "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
        echo "" && echo "To display the log output in fulscreen: watch tail -n 20 "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
    fi
elif [[ ! -z "$BASECALL" ]]; then
    if [[ -z "$GPUMEM" ]] || [[ -z "$SAMPLESHEET" ]] || [[ -z "$PRIMERSCHEME" ]]; then
        usage
    else
        LIBRARY_NAME=$(basename "$BASECALL")
        [ ! -d "$VGAP"/analysis ] && mkdir "$VGAP"/analysis
        [ ! -d "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS ] && mkdir "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY
        echo "" && echo "Output path: "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS"
        echo "" && echo "Log Analysis: "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
        echo "" && echo "To display the log output in fulscreen: watch tail -n 20 "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
    fi
else
    usage
fi

bg() {

    start=$(date +%s.%N)

    if [[ ! -z "$BASECALLDEMUX" ]]; then
        if [[ -z "$GPUMEM" ]]; then
            usage
        else
            guppy_basecaller -r -x auto --verbose_logs --disable_pings -c dna_r9.4.1_450bps_hac.cfg -i "$BASECALLDEMUX" -s "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/BASECALL --gpu_runners_per_device "$GPUMEM" --chunks_per_runner 800 --chunk_size 2000 --num_callers "$THREADS" --min_qscore 8
            guppy_barcoder -r -x auto --disable_pings --trim_adapters --trim_barcodes -i "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/BASECALL/pass -s "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/DEMUX --num_mid_barcoding_buffers "$GPUMEM" --num_barcoding_threads "$THREADS" -t "$THREADS"
            for i in $(find "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/DEMUX -type d -name "barcode*" | sort); do
                cat "$i"/*.fastq > "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/CAT/$(echo "$i" | awk -F/ '{print $NF}').fastq
            done
            source activate vgap_qc
            pycoQC -q -f "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/BASECALL/sequencing_summary.txt -b "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/DEMUX/barcoding_summary.txt -o "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".qc.$(uname -n).$(date +'%Y-%m-%d').html --report_title "$LIBRARY_NAME"
        fi
    elif [[ ! -z "$ASSEMBLY" ]]; then
        if [[ -z "$SAMPLESHEET" ]] || [[ -z "$PRIMERSCHEME" ]]; then
            usage
        else
            REFSEQID=$(echo "$PRIMERSCHEME" | awk -F/ '{print $1}')
            MIN=$(paste <(awk -F"\t" '$4~/RIGHT|R|REVERSE|REV|RV|R/ {print $2}' "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".scheme.bed) <(awk -F"\t" '$4~/LEFT|L|FORWARD|FWD|FW|F/ {print $3}' "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".scheme.bed) | awk -F"\t" '{print $1-$2}' | awk '{if ($0>0) print $0}' | sort -n | sed -n '1p')
            MAX=$(paste <(awk -F"\t" '$4~/RIGHT|R|REVERSE|REV|RV|R/ {print $2}' "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".scheme.bed) <(awk -F"\t" '$4~/LEFT|L|FORWARD|FWD|FW|F/ {print $3}' "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".scheme.bed) | awk -F"\t" '{print $1-$2}' | awk '{if ($0>0) print $0+200}' | sort -nr | sed -n '1p')
            source activate vgap_assembly
            for i in $(find "$ASSEMBLY" -type d -name "barcode*" | sort); do
            artic guppyplex --skip-quality-check --min-length "$MIN" --max-length "$MAX" --directory "$i" --output "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/BC"$(basename $i | awk -Fe '{print $2}')"_"$LIBRARY_NAME".fastq
            done
            cd "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY
            echo "SampleId#NumberTotalReads#NumberReadsMapped#AverageDepth#Depth20x#Depth100x#Depth1000x#ReferenceCoverage#NCount#NCountPercent" | tr '#' '\t' > "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            for i in $(cat "$SAMPLESHEET"); do
                SAMPLE=$(echo "$i" | awk -F, '{print $1}' | sed '/^$/d')
                BARCODE=$(echo "$i"| awk -F, '{print $2}' | sed '/^$/d')
                mkdir "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"
                if [ $(echo "$BARCODE" | awk '{if ($0 ~ /-/) {print "yes"} else {print "no"}}') == "yes" ]; then
                    for j in $(echo "$BARCODE" | tr '-' '\n'); do
                        cat "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$j"_"$LIBRARY_NAME".fastq > "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$BARCODE"_"$LIBRARY_NAME".fastq
                    done
                fi
                source activate vgap_assembly
                export PATH=$HOME/.cargo/bin:/usr/local/share/rsi/idl/bin:$PATH
                artic minion --medaka --medaka-model r941_min_high_g360 --normalise 0 --threads "$THREADS" --read-file "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$BARCODE"_"$LIBRARY_NAME".fastq --scheme-directory "$VGAP"/primer_schemes "$PRIMERSCHEME" "$SAMPLE"
                mv "$SAMPLE"*.* "$SAMPLE"
                echo -n "#" | tr '#' '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                echo -n "$SAMPLE""#" | tr '#' '\t' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                samtools view -c "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".sorted.bam | awk '{printf $0"#"}' | tr '#' '\t' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                samtools view -c "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{printf $0"#"}' | tr '#' '\t' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                AVGDEPTH=$(samtools depth "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{sum+=$3} END {print sum/NR}')
                if [[ "$AVGDEPTH" == "" || "$AVGDEPTH" == 0 ]]; then
                    echo "0.00""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                else
                    echo "$AVGDEPTH" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                fi
                paste <(samtools depth "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"20"') {print $0}}' | wc -l) <(fastalength "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                paste <(samtools depth "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"100"') {print $0}}' | wc -l) <(fastalength "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                paste <(samtools depth "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"1000"') {print $0}}' | wc -l) <(fastalength "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                REFSIZE=$(fastalength "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}')
                ATGC=$(seqtk comp "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $3+$4+$5+$6}')
                NCOUNT=$(seqtk comp "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $9}')
                REVCOV=$(paste <(fastalength "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') <(seqtk comp "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $9}') | awk -F"\t" '{printf("%0.2f\n", ($1-$2)/$1*100)}')
                NCOUNTPER=$(paste <(seqtk comp "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $9}') <(fastalength "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", ($1/$2)*100)}')
                if [[ ! -f "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta ]]; then
                    echo "0.00""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                    echo "$REFSIZE""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                    echo "100.00" >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                else
                    if [[ "$NCOUNT" == 0 ]]; then
                        echo "0.00""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                        echo "$REFSIZE""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                        echo "100.00" >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                    else
                        echo "$REVCOV" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                        echo "$NCOUNT" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                        echo "$NCOUNTPER" >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                    fi
                fi
                cat "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/consensus.tmp
                source activate vgap_plot
                fastcov.py -l "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam -o "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".coverage.$(uname -n).$(date +'%Y-%m-%d').pdf
            done
            sed '/^[[:space:]]*$/d' "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp > "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".summary.$(uname -n).$(date +'%Y-%m-%d').txt
            gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".coverage.$(uname -n).$(date +'%Y-%m-%d').pdf "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/*/*.pdf
            source activate vgap_assembly
            mafft --thread "$THREADS" --quiet --auto --keeplength --inputorder --6merpair --leavegappyregion --addfragments "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/consensus.tmp "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | sed '/>/!y/atcgn-/ATCGNN/' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".consensus.$(uname -n).$(date +'%Y-%m-%d').fasta
        fi
    elif [[ ! -z "$BASECALL" ]]; then
        if [[ -z "$GPUMEM" ]] || [[ -z "$SAMPLESHEET" ]] || [[ -z "$PRIMERSCHEME" ]]; then
            usage
        else
            REFSEQID=$(echo "$PRIMERSCHEME" | awk -F/ '{print $1}')
            MIN=$(paste <(awk -F"\t" '$4~/RIGHT|R|REVERSE|REV|RV|R/ {print $2}' "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".scheme.bed) <(awk -F"\t" '$4~/LEFT|L|FORWARD|FWD|FW|F/ {print $3}' "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".scheme.bed) | awk -F"\t" '{print $1-$2}' | awk '{if ($0>0) print $0}' | sort -n | sed -n '1p')
            MAX=$(paste <(awk -F"\t" '$4~/RIGHT|R|REVERSE|REV|RV|R/ {print $2}' "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".scheme.bed) <(awk -F"\t" '$4~/LEFT|L|FORWARD|FWD|FW|F/ {print $3}' "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".scheme.bed) | awk -F"\t" '{print $1-$2}' | awk '{if ($0>0) print $0+200}' | sort -nr | sed -n '1p')
            guppy_basecaller -r -x auto --verbose_logs --disable_pings -c dna_r9.4.1_450bps_hac.cfg -i "$BASECALL" -s "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/BASECALL --gpu_runners_per_device "$GPUMEM" --chunks_per_runner 800 --chunk_size 2000 --num_callers "$THREADS" --min_qscore 8
            guppy_barcoder -r -x auto --disable_pings --trim_adapters --trim_barcodes -i "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/BASECALL/pass -s "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/DEMUX --num_mid_barcoding_buffers "$GPUMEM" --num_barcoding_threads "$THREADS" -t "$THREADS"
            pycoQC -q -f "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/BASECALL/sequencing_summary.txt -b "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/DEMUX/barcoding_summary.txt -o "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".qc.$(uname -n).$(date +'%Y-%m-%d').html --report_title "$LIBRARY_NAME"
            source activate vgap_assembly
            for i in $(find "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/DEMUX -type d -name "barcode*" | sort); do
                artic guppyplex --skip-quality-check --min-length "$MIN" --max-length "$MAX" --directory "$i" --output "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/BC"$(basename $i | awk -Fe '{print $2}')"_"$LIBRARY_NAME".fastq
            done
            cd "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY
            echo "SampleId#NumberTotalReads#NumberReadsMapped#AverageDepth#Depth20x#Depth100x#Depth1000x#ReferenceCoverage#NCount#NCountPercent" | tr '#' '\t' > "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            for i in $(cat "$SAMPLESHEET"); do
                SAMPLE=$(echo "$i" | awk -F, '{print $1}' | sed '/^$/d')
                BARCODE=$(echo "$i"| awk -F, '{print $2}' | sed '/^$/d')
                mkdir "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"
                if [ $(echo "$BARCODE" | awk '{if ($0 ~ /-/) {print "yes"} else {print "no"}}') == "yes" ]; then
                    for j in $(echo "$BARCODE" | tr '-' '\n'); do
                        cat "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$j"_"$LIBRARY_NAME".fastq > "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$BARCODE"_"$LIBRARY_NAME".fastq
                    done
                fi
                source activate vgap_assembly
                export PATH=$HOME/.cargo/bin:/usr/local/share/rsi/idl/bin:$PATH
                artic minion --medaka --medaka-model r941_min_high_g360 --normalise 0 --threads "$THREADS" --read-file "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$BARCODE"_"$LIBRARY_NAME".fastq --scheme-directory "$VGAP"/primer_schemes "$PRIMERSCHEME" "$SAMPLE"
                mv "$SAMPLE"*.* "$SAMPLE"
                echo -n "#" | tr '#' '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                echo -n "$SAMPLE""#" | tr '#' '\t' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                samtools view -c "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".sorted.bam | awk '{printf $0"#"}' | tr '#' '\t' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                samtools view -c "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{printf $0"#"}' | tr '#' '\t' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                AVGDEPTH=$(samtools depth "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{sum+=$3} END {print sum/NR}')
                if [[ "$AVGDEPTH" == "" || "$AVGDEPTH" == 0 ]]; then
                    echo "0.00""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                else
                    echo "$AVGDEPTH" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                fi
                paste <(samtools depth "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"20"') {print $0}}' | wc -l) <(fastalength "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                paste <(samtools depth "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"100"') {print $0}}' | wc -l) <(fastalength "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                paste <(samtools depth "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"1000"') {print $0}}' | wc -l) <(fastalength "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                REFSIZE=$(fastalength "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}')
                ATGC=$(seqtk comp "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $3+$4+$5+$6}')
                NCOUNT=$(seqtk comp "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $9}')
                REVCOV=$(paste <(fastalength "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') <(seqtk comp "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $9}') | awk -F"\t" '{printf("%0.2f\n", ($1-$2)/$1*100)}')
                NCOUNTPER=$(paste <(seqtk comp "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $9}') <(fastalength "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", ($1/$2)*100)}')
                if [[ ! -f "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta ]]; then
                    echo "0.00""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                    echo "$REFSIZE""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                    echo "100.00" >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                else
                    if [[ "$NCOUNT" == 0 ]]; then
                        echo "0.00""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                        echo "$REFSIZE""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                        echo "100.00" >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                    else
                        echo "$REVCOV" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                        echo "$NCOUNT" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                        echo "$NCOUNTPER" >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                    fi
                fi
                cat "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/consensus.tmp
                source activate vgap_plot
                fastcov.py -l "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam -o "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".coverage.$(uname -n).$(date +'%Y-%m-%d').pdf
            done
            sed '/^[[:space:]]*$/d' "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp > "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".summary.$(uname -n).$(date +'%Y-%m-%d').txt
            gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".coverage.$(uname -n).$(date +'%Y-%m-%d').pdf "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/*/*.pdf
            source activate vgap_assembly
            mafft --thread "$THREADS" --quiet --auto --keeplength --inputorder --6merpair --leavegappyregion --addfragments "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/consensus.tmp "$VGAP"/primer_schemes/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | sed '/>/!y/atcgn-/ATCGNN/' >> "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".consensus.$(uname -n).$(date +'%Y-%m-%d').fasta
        fi
    else
        usage
    fi

    rm -rf "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/*.tmp # "$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/BC*fastq

    end=$(date +%s.%N)

    runtime=$(python -c "print(${end} - ${start})")

    echo "" && echo "Done. The runtime was "$runtime" seconds." && echo ""

}

bg &>>"$VGAP"/analysis/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt &

exit 0
