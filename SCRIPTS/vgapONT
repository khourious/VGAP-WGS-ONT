#!/bin/bash

usage () {
echo "
Viral genome assembly pipeline for WGS using Oxford Nanopore Technologies (ONT)

-> LIST OF AVAILABLE PRIMER SCHEMES IN THIS WORKFLOW:
Usage: $(basename "$0") -l

-> BASECALLING + DEMULTIPLEXING:
Usage: $(basename "$0") -b <input path> -g <gpu memory> -t <number threads>

-> BASECALLING + DEMULTIPLEXING + ASSEMBLY:
Usage: $(basename "$0") -i <input path> -g <gpu memory> -s <sample sheet> -t <number threads>

-b  Path containing the fast5 sequencing data (only for basecalling + demultiplexing workflow).
-g  VRAM to determine the number of runners per GPU device.
-i  Path containing the fast5 sequencing data (only for complete workflow).
-s  Path containing the sample sheet in csv (only for complete workflow).
-t  Max number of threads (default: all cores).
"
exit -1
}

primerscheme_list () {
echo "
AVAILABLE PRIMER SCHEMES
Updated Sep 12 2021


-> CHIKV Asian/ECSA <ZIBRA Project> (https://github.com/zibraproject/zika-pipeline)
ChikAsianECSA/V1

-> SARS-CoV-2 <ARTICnetwork> (https://github.com/artic-network/artic-ncov2019)
nCoV-2019/V1
nCoV-2019/V2
nCoV-2019/V3
nCoV-2019/V4

-> SARS-CoV-2 <FIOCRUZ-IOC> (https://doi.org/10.1101/2020.04.30.069039)
hCoV/V1
hCoV/V2

-> ZIKV Asian <ZIBRA Project> (https://github.com/zibraproject/zika-pipeline)
ZikaAsian/V1
"
exit -1
}

while getopts "b:g:i:ls:t:" OPT; do
    case "$OPT" in
        b) BASECALLDEMUX="$OPTARG";;
        g) GPUMEM="$OPTARG";;
        i) INPUT="$OPTARG";;
        l) primerscheme_list;;
        s) SAMPLESHEET="$OPTARG";;
        t) THREADS="$OPTARG";;
    esac
done

VGAP="$HOME"/vgapONT

if [ -z "$THREADS" ]; then THREADS=$(lscpu | grep 'CPU(s):' | awk '{print $2}' | sed -n '1p' | awk '{print $1-2}'); fi

if [[ -z "$INPUT" ]] || [[ -z "$GPUMEM" ]] || [[ -z "$SAMPLESHEET" ]]; then
    if [[ -z "$BASECALLDEMUX" ]] || [[ -z "$GPUMEM" ]]; then
        usage
    else
        LIBRARY_NAME=$(basename "$BASECALLDEMUX")
        [ ! -d "$VGAP"/ANALYSIS ] && mkdir "$VGAP"/ANALYSIS
        [ ! -d "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS ] && mkdir "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS \
            "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/CAT "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY
        echo "" && echo "Output path: "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS"
        echo "" && echo "Log Analysis: "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
    fi
else
    LIBRARY_NAME=$(basename "$INPUT")
    [ ! -d "$VGAP"/ANALYSIS ] && mkdir "$VGAP"/ANALYSIS
    [ ! -d "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS ] && mkdir "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS \
        "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY
    echo "" && echo "Output path: "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS"
    echo "" && echo "Log Analysis: "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(date +%s.%N).txt"
fi

bg() {

    start=$(date +%s.%N)

    if [[ -z "$INPUT" ]] || [[ -z "$GPUMEM" ]] || [[ -z "$SAMPLESHEET" ]]; then
        if [[ -z "$BASECALLDEMUX" ]] || [[ -z "$GPUMEM" ]]; then
            usage
        else
            guppy_basecaller -r -x auto --verbose_logs --disable_pings -c dna_r9.4.1_450bps_hac.cfg \
                -i "$BASECALLDEMUX" -s "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/BASECALL \
                --gpu_runners_per_device "$GPUMEM" --chunks_per_runner 800 --chunk_size 2000 \
                --num_callers "$THREADS" --min_qscore 7 --compress_fastq
            guppy_barcoder -r --require_barcodes_both_ends --trim_barcodes -t "$THREADS" -x auto \
                -i "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/BASECALL \
                -s "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/DEMUX
            for i in $(find "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/DEMUX -type d -name "barcode*" | sort); do \
                cat "$i"/*.fastq > $(echo "$i" | awk -F/ '{print $NF}').fasta
            done
            source activate vgap_qc
            pycoQC -q -f "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/BASECALL/sequencing_summary.txt \
                -b "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/DEMUX/barcoding_summary.txt \
                -o "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".qc.$(uname -n).$(date +'%Y-%m-%d').html \
                --report_title "$LIBRARY_NAME"
        fi
    else
        PRIMERSCHEME="$(cat "$SAMPLESHEET" | awk -F, '{print $3}' | uniq)"
        REFSEQ="$(cat "$SAMPLESHEET" | awk -F, '{print $3}' | awk -F/ '{print $1}' | uniq)"
        MIN="$(paste <(awk -F"\t" '$4~/RIGHT|R|REVERSE|REV|RV|R/ {print $2}' "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQ".scheme.bed) \
            <(awk -F"\t" '$4~/LEFT|L|FORWARD|FWD|FW|F/ {print $3}' "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQ".scheme.bed) | \
            awk -F"\t" '{print $1-$2}' | awk '{if ($0>0) print $0}' | sort -n | sed -n '1p')"
        MAX="$(paste <(awk -F"\t" '$4~/RIGHT|R|REVERSE|REV|RV|R/ {print $2}' "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQ".scheme.bed) \
            <(awk -F"\t" '$4~/LEFT|L|FORWARD|FWD|FW|F/ {print $3}' "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQ".scheme.bed) | \
            awk -F"\t" '{print $1-$2}' | awk '{if ($0>0) print $0+200}' | sort -nr | sed -n '1p')"
        guppy_basecaller -r -x auto --verbose_logs --disable_pings -c dna_r9.4.1_450bps_hac.cfg -i "$INPUT" \
            -s "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/BASECALL --gpu_runners_per_device "$GPUMEM" --chunks_per_runner 800 \
            --chunk_size 2000 --num_callers "$THREADS" --min_qscore 7
        guppy_barcoder -r --require_barcodes_both_ends --trim_barcodes -t "$THREADS" -x auto \
            -i "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/BASECALL -s "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/DEMUX
        source activate ont_qc
        pycoQC -q -f "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/BASECALL/sequencing_summary.txt \
            -b "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/DEMUX/barcoding_summary.txt \
            -o "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".qc.html --report_title "$LIBRARY_NAME"
        source activate ont_assembly
        for i in $(find "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/DEMUX -type d -name "barcode*" | sort); do
            artic guppyplex --min-length "$MIN" --max-length "$MAX" --directory "$i" \
                --output "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/BC"$(basename $i | awk -Fe '{print $2}')"_"$LIBRARY_NAME".fastq
        done
        echo "SampleId#NumberTotalReads#NumberReadsMapped#AverageDepth#Depth20x#Depth100x#Depth1000x#ReferenceCoverage#NCount" | tr '#' '\t' \
            > "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats."$(date +%s.%N)".txt
        cd "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY
        for i in $(cat "$SAMPLESHEET"); do
            SAMPLE="$(echo "$i" | awk -F, '{print $1}' | sed '/^$/d')"
            BARCODE="$(echo "$i"| awk -F, '{print $2}' | sed '/^$/d')"
            mkdir "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"
            if [ $(echo "$BARCODE" | awk '{if ($0 ~ /-/) {print "yes"} else {print "no"}}') == "yes" ]; then
                for i in $(echo "$BARCODE" | tr '-' '\n'); do
                    cat "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$i"_"$LIBRARY_NAME".fastq
                done > "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$BARCODE"_"$LIBRARY_NAME".fastq
            fi
            source activate ont_assembly
            artic minion --medaka --medaka-model r941_min_high_g360 --normalise 0 --threads "$THREADS" \
                --read-file "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$BARCODE"_"$LIBRARY_NAME".fastq \
                --scheme-directory "$VGAP"/PRIMERSCHEMES "$PRIMERSCHEME" "$SAMPLE"
            mv "$SAMPLE"*.* "$SAMPLE"
            rm BC*fastq
            cat "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta >> \
                "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".consensus."$(date +%s.%N)".fasta
            echo -n "$SAMPLE""#" | tr '#' '\t' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats."$(date +%s.%N)".txt
            samtools view -c "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | \
                awk '{printf $1"#"}' | tr '#' '\t' \
                >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats."$(date +%s.%N)".txt
            samtools view -c -h -F 4 "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | \
                awk '{printf $1"#"}' | tr '#' '\t' \
                >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats."$(date +%s.%N)".txt
            samtools depth "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | \
                awk '{sum+=$3} END {print sum/NR}' | awk '{printf $1"#"}' | tr '#' '\t' \
                >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats."$(date +%s.%N)".txt
            paste <(samtools depth "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | \
                awk '{if ($3 > '"20"') {print $0}}' | wc -l) <(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQ".reference.fasta | \
                awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' \
                >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats."$(date +%s.%N)".txt
            paste <(samtools depth "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | \
                awk '{if ($3 > '"100"') {print $0}}' | wc -l) <(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQ".reference.fasta | \
                awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' \
                >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats."$(date +%s.%N)".txt
            paste <(samtools depth "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | \
                awk '{if ($3 > '"1000"') {print $0}}' | wc -l) <(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQ".reference.fasta | \
                awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' \
                >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats."$(date +%s.%N)".txt
            paste <(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQ".reference.fasta | awk '{print $1}') \
                <(seqtk comp "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | \
                awk -F"\t" '{print $9}') | awk -F"\t" '{printf("%0.2f\n", ($1-$2)/$1*100)}' | awk '{printf $0"#"}' | tr '#' '\t' \
                >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats."$(date +%s.%N)".txt
            seqtk comp "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $9}' | \
                awk '{printf $1"#"}' | tr '#' '\n' \
                >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME"."$(date +%s.%N)".stats.txt
            source activate plot
            fastcov.py -l "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam \
                -o "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".coverage_depth.pdf
        done
        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH \
            -sOUTPUTFILE="$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".coverage."$(date +%s.%N)".pdf \
            "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/*/*.pdf
    fi

    end=$(date +%s.%N)

    runtime=$(python -c "print(${end} - ${start})")

    echo "" && echo "Done. The runtime was "$runtime" seconds." && echo ""

}

bg &>>"$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt &

exit 0
