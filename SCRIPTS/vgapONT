#!/bin/bash

usage () {
echo "
Viral genome assembly pipeline for WGS using Oxford Nanopore Technologies (ONT)

-> UPDATE CONDA DEPENDENCIES:
Usage: $(basename "$0") -u

-> LIST OF AVAILABLE PRIMER SCHEMES IN THIS WORKFLOW:
Usage: $(basename "$0") -l

-> BASECALLING + DEMULTIPLEXING:
Usage: $(basename "$0") -b <input path> -g <gpu memory> -t <number threads>

-> BASECALLING + DEMULTIPLEXING + ASSEMBLY:
Usage: $(basename "$0") -i <input path> -g <gpu memory> -p <primer scheme> -s <sample sheet> -t <number threads>

-b  Path containing the fast5 sequencing data (only for basecalling + demultiplexing workflow).
-g  VRAM to determine the number of runners per GPU device.
-i  Path containing the fast5 sequencing data.
-p  Primer scheme panel user for generate amplicons.
-s  Path containing the sample sheet in csv.
-t  Max number of threads (default: all cores minus 2).
-u  Update conda dependencies.
"
exit -1
}

primerscheme_list () {
echo "
AVAILABLE PRIMER SCHEMES
Updated Jan 14 2022


-> CHIKV Asian/ECSA <ZIBRA Project> (https://github.com/zibraproject/zika-pipeline)
ChikAsianECSA/V1

-> SARS-CoV-2 <ARTICnetwork> (https://github.com/artic-network/artic-ncov2019)
SARS-CoV-2_ARTIC/V1
SARS-CoV-2_ARTIC/V2
SARS-CoV-2_ARTIC/V3
SARS-CoV-2_ARTIC/V4
SARS-CoV-2_ARTIC/V4.1

-> SARS-CoV-2 <FIOCRUZ-IOC> (https://doi.org/10.1101/2020.04.30.069039)
SARS-CoV-2_FIOCRUZ-IOC/V1
SARS-CoV-2_FIOCRUZ-IOC/V2

-> ZIKV Asian <ZIBRA Project> (https://github.com/zibraproject/zika-pipeline)
ZikaAsian/V1
"
exit -1
}

update () {

    mamba update -y -n base -c conda-forge -c anaconda -c bioconda -c defaults conda
    mamba update -y -n vgap_assembly -c conda-forge -c anaconda -c bioconda -c defaults --all
    mamba update -y -n vgap_plot -c conda-forge -c anaconda -c bioconda -c defaults --all

exit -1
}

while getopts "b:g:i:lp:s:t:u" OPT; do
    case "$OPT" in
        b) BASECALLDEMUX="$OPTARG";;
        g) GPUMEM="$OPTARG";;
        i) BASECALL="$OPTARG";;
        l) primerscheme_list;;
        p) PRIMERSCHEME="$OPTARG";;
        s) SAMPLESHEET="$OPTARG";;
        t) THREADS="$OPTARG";;
        u) update;;
    esac
done

VGAP="$HOME"/vgapONT

if [ -z "$THREADS" ]; then THREADS=$(lscpu | grep 'CPU(s):' | awk '{print $2}' | sed -n '1p' | awk '{print $1-2}'); fi

if [[ -z "$BASECALL" ]] || [[ -z "$GPUMEM" ]] || [[ -z "$SAMPLESHEET" ]] || [[ -z "$PRIMERSCHEME" ]]; then
    if [[ -z "$BASECALLDEMUX" ]] || [[ -z "$GPUMEM" ]]; then
        usage
    else
        LIBRARY_NAME=$(basename "$BASECALLDEMUX")
        [ ! -d "$VGAP"/ANALYSIS ] && mkdir "$VGAP"/ANALYSIS
        [ ! -d "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS ] && mkdir "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/CAT "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY
        echo "" && echo "Output path: "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS"
        echo "" && echo "Log Analysis: "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
        echo "" && echo "To display the log output in fulscreen: watch tail -n 20 "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
    fi
else
    LIBRARY_NAME=$(basename "$BASECALL")
    [ ! -d "$VGAP"/ANALYSIS ] && mkdir "$VGAP"/ANALYSIS
    [ ! -d "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS ] && mkdir "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY
    echo "" && echo "Output path: "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS"
    echo "" && echo "Log Analysis: "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
    echo "" && echo "To display the log output in fulscreen: watch tail -n 20 "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
fi

bg() {

    start=$(date +%s.%N)

    if [[ -z "$BASECALL" ]] || [[ -z "$GPUMEM" ]] || [[ -z "$SAMPLESHEET" ]] || [[ -z "$PRIMERSCHEME" ]]; then
        if [[ -z "$BASECALLDEMUX" ]] || [[ -z "$GPUMEM" ]]; then
            usage
        else
            guppy_basecaller -r -x auto --verbose_logs --disable_pings -c dna_r9.4.1_450bps_hac.cfg -i "$BASECALLDEMUX" -s "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/BASECALL --gpu_runners_per_device "$GPUMEM" --chunks_per_runner 800 --chunk_size 2000 --num_callers "$THREADS" --min_qscore 7 --compress_fastq
            guppy_barcoder -r --require_barcodes_both_ends --trim_barcodes -t "$THREADS" -x auto -i "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/BASECALL/pass -s "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/DEMUX
            for i in $(find "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/DEMUX -type d -name "barcode*" | sort); do
                cat "$i"/*.fastq > "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/CAT/$(echo "$i" | awk -F/ '{print $NF}').fastq
            done
            source activate vgap_qc
            pycoQC -q -f "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/BASECALL/sequencing_summary.txt -b "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/DEMUX/barcoding_summary.txt -o "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".qc.$(uname -n).$(date +'%Y-%m-%d').html --report_title "$LIBRARY_NAME"
        fi
    else
        REFSEQID=$(echo "$PRIMERSCHEME" | awk -F/ '{print $1}')
        MIN=$(paste <(awk -F"\t" '$4~/RIGHT|R|REVERSE|REV|RV|R/ {print $2}' "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQID".scheme.bed) <(awk -F"\t" '$4~/LEFT|L|FORWARD|FWD|FW|F/ {print $3}' "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQID".scheme.bed) | awk -F"\t" '{print $1-$2}' | awk '{if ($0>0) print $0}' | sort -n | sed -n '1p')
        MAX=$(paste <(awk -F"\t" '$4~/RIGHT|R|REVERSE|REV|RV|R/ {print $2}' "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQID".scheme.bed) <(awk -F"\t" '$4~/LEFT|L|FORWARD|FWD|FW|F/ {print $3}' "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQID".scheme.bed) | awk -F"\t" '{print $1-$2}' | awk '{if ($0>0) print $0+200}' | sort -nr | sed -n '1p')
        guppy_basecaller -r -x auto --verbose_logs --disable_pings -c dna_r9.4.1_450bps_hac.cfg -i "$BASECALL" -s "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/BASECALL --gpu_runners_per_device "$GPUMEM" --chunks_per_runner 800 --chunk_size 2000 --num_callers "$THREADS" --min_qscore 7 --compress_fastq
        guppy_barcoder -r --require_barcodes_both_ends --trim_barcodes -t "$THREADS" -x auto -i "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/BASECALL/pass -s "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/DEMUX
        source activate vgap_qc
        pycoQC -q -f "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/BASECALL/sequencing_summary.txt -b "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/DEMUX/barcoding_summary.txt -o "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".qc.$(uname -n).$(date +'%Y-%m-%d').html --report_title "$LIBRARY_NAME"
        source activate vgap_assembly
        for i in $(find "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/DEMUX -type d -name "barcode*" | sort); do
            artic guppyplex --min-length "$MIN" --max-length "$MAX" --directory "$i" --output "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/BC"$(basename $i | awk -Fe '{print $2}')"_"$LIBRARY_NAME".fastq
        done
        cd "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY
        echo "SampleId#NumberTotalReads#NumberReadsMapped#AverageDepth#Depth20x#Depth100x#Depth1000x#ReferenceCoverage#NCount#NCountPercent" | tr '#' '\t' > "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
        for i in $(cat "$SAMPLESHEET"); do
            SAMPLE=$(echo "$i" | awk -F, '{print $1}' | sed '/^$/d')
            BARCODE=$(echo "$i"| awk -F, '{print $2}' | sed '/^$/d')
            mkdir "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"
            if [ $(echo "$BARCODE" | awk '{if ($0 ~ /-/) {print "yes"} else {print "no"}}') == "yes" ]; then
                for j in $(echo "$BARCODE" | tr '-' '\n'); do
                    cat "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$j"_"$LIBRARY_NAME".fastq > "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$BARCODE"_"$LIBRARY_NAME".fastq
                done
            fi
            source activate vgap_assembly
            artic minion --medaka --medaka-model r941_min_high_g360 --normalise 0 --threads "$THREADS" --read-file "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$BARCODE"_"$LIBRARY_NAME".fastq --scheme-directory "$VGAP"/PRIMER_SCHEMES "$PRIMERSCHEME" "$SAMPLE"
            mv "$SAMPLE"*.* "$SAMPLE"
            echo -n "#" | tr '#' '\n' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            echo -n "$SAMPLE""#" | tr '#' '\t' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            samtools view -c "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".sorted.bam | awk '{printf $0"#"}' | tr '#' '\t' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            samtools view -c "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{printf $0"#"}' | tr '#' '\t' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            AVGDEPTH=$(samtools depth "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{sum+=$3} END {print sum/NR}')
            if [[ "$AVGDEPTH" == 0 ]]; then
                echo "0""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            else
                echo "$AVGDEPTH" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            fi
            paste <(samtools depth "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"20"') {print $0}}' | wc -l) <(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            paste <(samtools depth "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"100"') {print $0}}' | wc -l) <(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            paste <(samtools depth "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"1000"') {print $0}}' | wc -l) <(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            REFSIZE=$(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}')
            ATGC=$(seqtk comp "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $3+$4+$5+$6}')
            NCOUNT=$(seqtk comp "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $9}')
            REVCOV=$(paste <(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') <(seqtk comp "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $9}') | awk -F"\t" '{printf("%0.2f\n", ($1-$2)/$1*100)}')
            NCOUNTPER=$(paste <(seqtk comp "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta | awk -F"\t" '{print $9}') <(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", ($1/$2)*100)}')
            if [[ "$NCOUNT" == 0 ]]; then
                echo "0""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                echo "$REFSIZE""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                echo "100""#" | tr '#' '\t' | tr -d '\n' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            else
                echo "$REVCOV" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                echo "$NCOUNT" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
                echo "$NCOUNTPER" >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp
            fi
            cat "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".consensus.fasta >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/consensus.tmp
            source activate vgap_plot
            fastcov.py -l "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".primertrimmed.rg.sorted.bam -o "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"/"$SAMPLE".coverage.$(uname -n).$(date +'%Y-%m-%d').pdf
        done
        sed '/^[[:space:]]*$/d' "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/summary.tmp > "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".summary.$(uname -n).$(date +'%Y-%m-%d').txt
        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".coverage.$(uname -n).$(date +'%Y-%m-%d').pdf "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/*/*.pdf
        source activate vgap_assembly
        mafft --thread "$THREADS" --quiet --auto --keeplength --inputorder --6merpair --leavegappyregion --addfragments "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/consensus.tmp "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQID".reference.fasta | seqkit grep -vip MN908947.3 | sed '/>/!y/atcgn-/ATCGNN/' >> "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".consensus.$(uname -n).$(date +'%Y-%m-%d').fasta
    fi

    rm -rf "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/BC*fastq "$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/*.tmp

    end=$(date +%s.%N)

    runtime=$(python -c "print(${end} - ${start})")

    echo "" && echo "Done. The runtime was "$runtime" seconds." && echo ""

}

bg &>>"$VGAP"/ANALYSIS/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt &

exit 0
