#!/bin/bash

usage () {
echo "
Viral genome assembly pipeline for WGS using ONT

-> LIST OF AVAILABLE PRIMER SCHEMES IN THIS WORKFLOW:
Usage: $(basename "$0") -l

-> BASECALLING + DEMULTIPLEXING:
Usage: $(basename "$0") -b <input path> -g <gpu memory> -t <number threads>

-> BASECALLING + DEMULTIPLEXING + ASSEMBLY:
Usage: $(basename "$0") -i <input path> -g <gpu memory> -s <sample sheet> -t <number threads>

-b  Path containing the fast5 sequencing data (only for basecalling + demultiplexing workflow).
-g  VRAM to determine the number of runners per GPU device.
-i  Path containing the fast5 sequencing data (only for complete workflow).
-s  Path containing the sample sheet in csv (only for complete workflow).
-t  Max number of threads (default: all cores).
"
exit -1
}

primerscheme_list () {
echo "
AVAILABLE PRIMER SCHEMES
Updated Sep 12 2021


-> CHIKV Asian/ECSA <ZIBRA Project> (https://github.com/zibraproject/zika-pipeline)
ChikAsianECSA/V1

-> SARS-CoV-2 <ARTICnetwork> (https://github.com/artic-network/artic-ncov2019)
nCoV-2019/V1
nCoV-2019/V2
nCoV-2019/V3
nCoV-2019/V4

-> SARS-CoV-2 <FIOCRUZ-IOC> (https://doi.org/10.1101/2020.04.30.069039)
hCoV/V1
hCoV/V2

-> ZIKV Asian <ZIBRA Project> (https://github.com/zibraproject/zika-pipeline)
ZikaAsian/V1
"
exit -1
}

while getopts "hb:g:i:ls:t:" OPT; do
    case "$OPT" in
        h) usage;;
        b) BASECALLDEMUX="$OPTARG";;
        g) GPUMEM="$OPTARG";;
        i) INPUT="$OPTARG";;
        l) primerscheme_list;;
        s) SAMPLESHEET="$OPTARG";;
        t) THREADS="$OPTARG";;
    esac
done

VGAP=$(find "$HOME" -type d -name "vgapWGS")

if [ -z "$THREADS" ]; then THREADS="$(lscpu | grep 'CPU(s):' | awk '{print $2}' | sed -n '1p')"; fi

[ ! -d "$VGAP"/LIBRARIES ] && mkdir "$VGAP"/LIBRARIES

LIBRARY_NAME=$(basename "$BASECALLDEMUX")

if [[ -z "$BASECALLDEMUX" ]] || [[ -z "$GPUMEM" ]]; then usage; else echo "Log Analysis: "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.txt"; fi

if [[ -z "$INPUT" ]] || [[ -z "$GPUMEM" ]] || [[ -z "$SAMPLESHEET" ]]; then usage; else echo "Log Analysis: "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.txt"; fi

bg() {

    start=$(date +%s.%N)

    if [[ "$BASECALLDEMUX" ]] || [[ "$GPUMEM" ]]; then
        [ ! -d "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS ] && mkdir "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY
        guppy_basecaller -r -x auto --verbose_logs --disable_pings -c dna_r9.4.1_450bps_hac.cfg -i "$BASECALLDEMUX" -s "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/BASECALL --gpu_runners_per_device "$GPUMEM" --chunks_per_runner 800 --chunk_size 2000 --num_callers "$THREADS" --min_qscore 7
        guppy_barcoder -r --require_barcodes_both_ends --trim_barcodes -t "$THREADS" -x auto -i "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/BASECALL -s "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/DEMUX
        source activate ont_qc
        pycoQC -q -f "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/BASECALL/sequencing_summary.txt -b "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/DEMUX/barcoding_summary.txt -o "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".qc.html --report_title "$LIBRARY_NAME"
    fi

    if [[ "$INPUT" ]] || [[ "$GPUMEM" ]] || [[ "$SAMPLESHEET" ]]; then
        [ ! -d "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS ] && mkdir "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY
        PRIMER_SCHEME=$(cat "$SAMPLESHEET" | awk -F, '{print $3}' | uniq)
        REFSEQ=$(cat "$SAMPLESHEET" | awk -F, '{print $3}' | awk -F/ '{print $1}' | uniq)
        MIN=$(paste <(awk -F"\t" '$4~/RIGHT|R|REVERSE|REV|RV|R/ {print $2}' "$VGAP"/PRIMER_SCHEMES/"$PRIMER_SCHEME"/"$REFSEQ".scheme.bed) <(awk -F"\t" '$4~/LEFT|L|FORWARD|FWD|FW|F/ {print $3}' "$VGAP"/PRIMER_SCHEMES/"$PRIMER_SCHEME"/"$REFSEQ".scheme.bed) | awk -F"\t" '{print $1-$2}' | awk '{if ($0>0) print $0}' | sort -n | sed -n '1p')
        MAX=$(paste <(awk -F"\t" '$4~/RIGHT|R|REVERSE|REV|RV|R/ {print $2}' "$VGAP"/PRIMER_SCHEMES/"$PRIMER_SCHEME"/"$REFSEQ".scheme.bed) <(awk -F"\t" '$4~/LEFT|L|FORWARD|FWD|FW|F/ {print $3}' "$VGAP"/PRIMER_SCHEMES/"$PRIMER_SCHEME"/"$REFSEQ".scheme.bed) | awk -F"\t" '{print $1-$2}' | awk '{if ($0>0) print $0+200}' | sort -nr | sed -n '1p')
        guppy_basecaller -r -x auto --verbose_logs --disable_pings -c dna_r9.4.1_450bps_hac.cfg -i "$BASECALLDEMUX" -s "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/BASECALL --gpu_runners_per_device "$GPUMEM" --chunks_per_runner 800 --chunk_size 2000 --num_callers "$THREADS" --min_qscore 7
        guppy_barcoder -r --require_barcodes_both_ends --trim_barcodes -t "$THREADS" -x auto -i "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/BASECALL -s "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/DEMUX
        source activate ont_qc
        pycoQC -q -f "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/BASECALL/sequencing_summary.txt -b "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/DEMUX/barcoding_summary.txt -o "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".qc.html --report_title "$LIBRARY_NAME"
        source activate ont_assembly
        for i in $(find "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/DEMUX -type d -name "barcode*" | sort); do
            artic guppyplex --min-length "$MIN" --max-length "$MAX" --directory "$i" --output "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/BC"$(basename $i | awk -Fe '{print $2}')"_"$LIBRARY_NAME".fastq
        done
        echo "SampleId#NumberTotalReads#NumberReadsMapped#AverageDepth#Coverage20x#Coverage100x#Coverage1000x#NCount" | tr '#' '\t' > "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats.txt
        cd "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY
        for i in $(cat "$SAMPLESHEET"); do
            SAMPLE=$(echo "$i" | awk -F, '{print $1}' | sed '/^$/d')
            BARCODE=$(echo "$i"| awk -F, '{print $2}' | sed '/^$/d')
            mkdir "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$SAMPLE"
            if [ $(echo "$BARCODE" | awk '{if ($0 ~ /-/) {print "yes"} else {print "no"}}') == "yes" ]; then
                for i in $(echo "$BARCODE" | tr '-' '\n'); do
                    cat "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$i"_"$LIBRARY_NAME".fastq
                done > "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$BARCODE"_"$LIBRARY_NAME".fastq
            fi
            artic minion --medaka --medaka-model r941_min_high_g360 --normalise 0 --threads "$THREADS" --read-file "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$BARCODE"_"$LIBRARY_NAME".fastq --scheme-directory "$VGAP"/PRIMER_SCHEMES "$PRIMER_SCHEME" "$SAMPLE"
            cat "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$i".consensus.fasta >> "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".consensus.fasta
            echo -n "$SAMPLE""#" | tr '#' '\t' >> "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats.txt
            samtools view -c "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$i".primertrimmed.rg.sorted.bam | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats.txt
            samtools view -F 260 -c "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$i".primertrimmed.rg.sorted.bam | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats.txt
            samtools depth "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$i".primertrimmed.rg.sorted.bam | awk '{sum+=$3} END {print sum/NR}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats.txt
            paste <(samtools depth "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$i".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"20"') {print $0}}' | wc -l) <(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQ".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats.txt
            paste <(samtools depth "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$i".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"100"') {print $0}}' | wc -l) <(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQ".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats.txt
            paste <(samtools depth "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$i".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"1000"') {print $0}}' | wc -l) <(fastalength "$VGAP"/PRIMER_SCHEMES/"$PRIMERSCHEME"/"$REFSEQ".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $1"#"}' | tr '#' '\t' >> "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats.txt
            seqtk comp "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$i".consensus.fasta | awk -F"\t" '{print $9}' | awk '{printf $1"#"}' | tr '#' '\n' >> "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".stats.txt
        done
        source activate plot
        for i in $(find "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY -type f -name "*primertrimmed.rg.sorted.bam" | awk -F. '{print $1}' | sort -u);do
            fastcov.py -l "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$i".primertrimmed.rg.sorted.bam -o "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/"$i".coverage.pdf
        done
        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".depth.pdf "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/ASSEMBLY/*.pdf
        tar -czf "$VGAP"/LIBRARIES/"$LIBRARY_NAME".tar.gz -P "$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/*
    fi

    end=$(date +%s.%N)

    runtime=$(python -c "print(${end} - ${start})")

    echo "" && echo "Done. The runtime was $runtime seconds."

}

bg &>>"$VGAP"/LIBRARIES/"$LIBRARY_NAME"_ANALYSIS/SUMMARY/"$LIBRARY_NAME".log.txt &

exit 0
